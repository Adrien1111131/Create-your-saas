import { NextRequest, NextResponse } from 'next/server'
import { GrokOpportunity } from '@/lib/grok-service'

const GROK_API_KEY = process.env.GROK_API_KEY
const GROK_API_URL = 'https://api.x.ai/v1/chat/completions'
const GROK_MODEL = 'grok-3-latest'

interface AnalyzeProjectRequest {
  opportunity: GrokOpportunity
}

// Construire le prompt pour l'analyse approfondie du projet
const buildAnalysisPrompt = (opportunity: GrokOpportunity): string => {
  return `üéØ MISSION : Analyse approfondie et g√©n√©ration d'un CDC d√©taill√© pour ce projet SaaS francophone

üìã PROJET √Ä ANALYSER :
**Nom** : ${opportunity.nom}
**Description** : ${opportunity.description}
**Probl√®me r√©solu** : ${opportunity.probleme_resolu}
**Stack technique** : ${opportunity.stack_technique}
**Complexit√©** : ${opportunity.complexite}
**Temps de d√©veloppement** : ${opportunity.temps_dev}
**Revenus estim√©s** : ${opportunity.mrr_arr}
**March√© cible** : ${opportunity.type_marche}
**Opportunit√© francophone** : ${opportunity.opportunite}

üîç ANALYSE REQUISE :

G√©n√®re un **Cahier des Charges (CDC) complet et professionnel** qui inclut :

## 1. CONTEXTE ET OBJECTIFS
- Analyse du march√© francophone
- Positionnement concurrentiel
- Objectifs business clairs et mesurables

## 2. FONCTIONNALIT√âS D√âTAILL√âES
- Fonctionnalit√©s core (MVP)
- Fonctionnalit√©s avanc√©es (V2)
- User stories d√©taill√©es
- Wireframes conceptuels (description textuelle)

## 3. SP√âCIFICATIONS TECHNIQUES
- Architecture recommand√©e
- Stack technique justifi√©e
- Base de donn√©es et mod√®les
- APIs et int√©grations n√©cessaires
- S√©curit√© et conformit√© RGPD

## 4. ADAPTATION FRANCOPHONE
- Sp√©cificit√©s r√©glementaires (RGPD, CNIL, etc.)
- Int√©grations locales (Sage, URSSAF, banques fran√ßaises)
- Localisation (langue, devises, formats)
- Avantages concurrentiels vs solutions anglaises

## 5. PLAN DE D√âVELOPPEMENT
- Phases de d√©veloppement
- Estimation des t√¢ches
- Technologies et outils recommand√©s
- Ressources n√©cessaires

## 6. STRAT√âGIE DE LANCEMENT
- Plan de validation (MVP)
- Strat√©gie pricing pour le march√© francophone
- Canaux d'acquisition
- M√©triques de succ√®s

## 7. RISQUES ET MITIGATION
- Risques techniques identifi√©s
- Risques business
- Plans de mitigation

‚ö†Ô∏è EXIGENCES :
- Sois **critique et objectif**
- Identifie les **vraies difficult√©s**
- Propose des **solutions concr√®tes**
- Adapte sp√©cifiquement au **march√© francophone**
- Reste **r√©aliste** sur les d√©lais et co√ªts

üìù FORMAT : R√©dige un CDC professionnel, structur√© et actionnable.`
}

export async function POST(request: NextRequest) {
  try {
    const { opportunity }: AnalyzeProjectRequest = await request.json()
    
    if (!opportunity) {
      return NextResponse.json(
        { error: 'Opportunit√© manquante' },
        { status: 400 }
      )
    }

    // V√©rifier la cl√© API
    if (!GROK_API_KEY) {
      return NextResponse.json(
        { error: 'Configuration API manquante' },
        { status: 500 }
      )
    }

    const prompt = buildAnalysisPrompt(opportunity)
    console.log('üîç Analyse du projet avec Grok...')

    const response = await fetch(GROK_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${GROK_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: GROK_MODEL,
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en d√©veloppement SaaS et en analyse de march√© francophone. Tu g√©n√®res des cahiers des charges d√©taill√©s, critiques et r√©alistes. Tu es objectif et identifies les vraies difficult√©s sans √©dulcorer.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        stream: false,
        temperature: 0.3,
        max_tokens: 4000
      })
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      console.error('‚ùå Erreur API Grok:', response.status, errorData)
      
      return NextResponse.json(
        { error: `Erreur API Grok: ${response.status}` },
        { status: response.status }
      )
    }

    const data = await response.json()
    const cdc = data.choices[0].message.content.trim()
    
    console.log('‚úÖ CDC g√©n√©r√© avec succ√®s')
    
    return NextResponse.json({
      success: true,
      cdc: cdc,
      projectId: opportunity.id
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}
