import { NextRequest, NextResponse } from 'next/server'

interface SearchCriteria {
  timeRange: number[]
  difficulty: string
  selectedDomains: string[]
  productType: string
  targetClient: string
  mrrRange: number[]
  barriers: string
}

interface GrokOpportunity {
  id: string
  nom: string
  description: string
  probleme_resolu: string
  domaine: string
  type_marche: 'b2b' | 'b2c' | 'both'
  type_produit: 'micro-saas' | 'extension' | 'application' | 'api' | 'autre'
  mrr_arr: string
  source_revenus: string
  stack_technique: string
  temps_dev: string
  complexite: 'simple' | 'medium' | 'advanced'
  opportunite: string
  potentiel: 'üî•' | 'üî•üî•' | 'üî•üî•üî•'
  lien?: string
  lien_product_hunt?: string
  lien_indie_hackers?: string
  tags: string[]
  date_ajout: string
  validee_par: string
}

const GROK_API_KEY = process.env.GROK_API_KEY
const GROK_API_URL = 'https://api.x.ai/v1/chat/completions'
const GROK_MODEL = 'grok-3-latest'

// Construire le prompt pour Grok
const buildGrokPrompt = (criteria: SearchCriteria): string => {
  const {
    timeRange,
    difficulty,
    selectedDomains,
    productType,
    targetClient,
    mrrRange,
    barriers
  } = criteria

  const timeText = timeRange[0] <= 1 ? '1 jour' : 
                   timeRange[0] <= 7 ? '1 semaine' : 
                   timeRange[0] <= 30 ? '1 mois' : '3+ mois'

  const difficultyText = difficulty === 'Facile' ? 'simple (HTML/CSS/JS)' :
                        difficulty === 'Interm√©diaire' ? 'medium (React/Vue)' :
                        'advanced (Full-stack)'

  const domainsText = selectedDomains.length > 0 ? selectedDomains.join(', ') : 'tous domaines'

  return `üéØ MISSION : Trouve 5 SaaS ANGLAIS √† SUCC√àS √† copier/adapter pour le march√© FRANCOPHONE

üìä M√âTHODOLOGIE EN 3 √âTAPES :

1Ô∏è‚É£ **D√âTECTION** : Trouve des SaaS anglais rentables
2Ô∏è‚É£ **ANALYSE** : V√©rifie le gap francophone  
3Ô∏è‚É£ **STRAT√âGIE** : Propose l'adaptation fran√ßaise

‚ö†Ô∏è CRIT√àRES DE RECHERCHE :
- Temps dev : ${timeText} | Complexit√© : ${difficultyText} | Domaines : ${domainsText}
- SaaS avec revenus document√©s ${mrrRange[0]}$+/mois
- EXCLURE les g√©ants : Calendly, Notion, Slack, Zoom, Stripe, etc.
- FOCUS sur micro-SaaS et niches sp√©cialis√©es

üîç SOURCES √Ä EXPLORER (recherche web obligatoire) :
- **Product Hunt** : SaaS populaires avec m√©triques
- **Indie Hackers** : revenus document√©s + t√©moignages
- **MicroConf** : success stories de micro-SaaS
- **Reddit r/SaaS** : discussions sur les revenus
- **Chrome Web Store** : extensions rentables
- **GitHub** : projets open source populaires

üìã POUR CHAQUE SAAS TROUV√â, ANALYSE :

üîé **√âtape 1 - Le SaaS original** :
- Nom exact et URL
- Revenus document√©s (source pr√©cise)
- Fonctionnalit√©s principales
- Stack technique observ√©e

üîé **√âtape 2 - Gap francophone** :
- Existe-t-il un √©quivalent fran√ßais de qualit√© ?
- Quelles faiblesses dans les solutions fran√ßaises existantes ?
- Besoins sp√©cifiques FR/BE/CH/CA non couverts ?

üîé **√âtape 3 - Strat√©gie d'adaptation** :
- Fonctionnalit√©s √† ajouter pour le march√© francophone
- Conformit√© RGPD/r√©glementations locales
- Int√©grations sp√©cifiques (Sage, URSSAF, etc.)
- Avantages concurrentiels possibles

üìã FORMAT JSON STRICT :
[{
  "nom": "Nom du SaaS fran√ßais √† cr√©er (inspir√© de [SaaS original])",
  "saas_original": {
    "nom": "Nom exact du SaaS anglais",
    "url": "URL officielle",
    "date_creation": "Date de lancement/cr√©ation du SaaS original",
    "revenus": "Revenus document√©s avec source pr√©cise",
    "fonctionnalites": "Fonctionnalit√©s principales d√©taill√©es",
    "concurrents_actuels": "Liste des principaux concurrents du SaaS original"
  },
  "description": "Description de votre version fran√ßaise am√©lior√©e",
  "probleme_resolu": "Probl√®me sp√©cifique du march√© francophone",
  "domaine": "${domainsText}",
  "type_marche": "b2b/b2c/both",
  "type_produit": "micro-saas/extension/application/api",
  "mrr_arr": "Potentiel estim√© pour le march√© francophone",
  "source_revenus": "Source des donn√©es du SaaS original",
  "stack_technique": "Technologies recommand√©es",
  "temps_dev": "${timeText}",
  "complexite": "${difficultyText.split(' ')[0].toLowerCase()}",
  "opportunite_francophone": {
    "situation_actuelle": "Explication claire : que se passe-t-il actuellement sur le march√© francophone pour ce type d'outil ?",
    "probleme_identifie": "Quel est le probl√®me concret que rencontrent les utilisateurs francophones ?",
    "concurrents_francais": "Quels sont les concurrents fran√ßais existants et leurs faiblesses ?",
    "opportunite_claire": "Pourquoi c'est le bon moment pour cr√©er cette alternative fran√ßaise ? Explication naturelle et convaincante.",
    "avantages_specifiques": "Quels avantages concrets votre version fran√ßaise apportera-t-elle ?",
    "potentiel_marche": "Estimation du potentiel sur le march√© francophone avec justification"
  },
  "potentiel": "üî•/üî•üî•/üî•üî•üî•",
  "lien_inspiration": "URL du SaaS original √† copier",
  "tags": ["copie", "adaptation", "francophone"]
}]

üöÄ RECHERCHE MAINTENANT des SaaS anglais rentables √† adapter !`
}

// Parser la r√©ponse de Grok
const parseGrokResponse = (content: string): GrokOpportunity[] => {
  try {
    console.log('Parsing du contenu Grok:', content.substring(0, 500) + '...')
    
    // Nettoyer le contenu pour extraire le JSON
    let jsonContent = content.trim()
    
    // Supprimer les balises markdown si pr√©sentes
    if (jsonContent.includes('```json')) {
      jsonContent = jsonContent.split('```json')[1].split('```')[0].trim()
    } else if (jsonContent.includes('```')) {
      jsonContent = jsonContent.split('```')[1].split('```')[0].trim()
    }
    
    // Supprimer tout texte avant le premier [
    const jsonStart = jsonContent.indexOf('[')
    if (jsonStart > 0) {
      jsonContent = jsonContent.substring(jsonStart)
    }
    
    // Supprimer tout texte apr√®s le dernier ]
    const jsonEnd = jsonContent.lastIndexOf(']')
    if (jsonEnd > 0) {
      jsonContent = jsonContent.substring(0, jsonEnd + 1)
    }

    const parsedResults = JSON.parse(jsonContent)
    const opportunities = Array.isArray(parsedResults) ? parsedResults : [parsedResults]
    
    return opportunities.map((opp, index) => {
      // Construire l'analyse d'opportunit√© francophone avec le nouveau format am√©lior√©
      let opportuniteText = 'Opportunit√© de copie/adaptation √† analyser'
      
      if (opp.opportunite_francophone) {
        const opFr = opp.opportunite_francophone
        opportuniteText = `üéØ OPPORTUNIT√â FRANCOPHONE :

üìç Situation actuelle : ${opFr.situation_actuelle || 'Non analys√©e'}

‚ùó Probl√®me identifi√© : ${opFr.probleme_identifie || 'Non sp√©cifi√©'}

üá´üá∑ Concurrents fran√ßais : ${opFr.concurrents_francais || 'Non √©valu√©s'}

üí° Opportunit√© claire : ${opFr.opportunite_claire || 'Non d√©finie'}

‚ú® Avantages sp√©cifiques : ${opFr.avantages_specifiques || 'Non identifi√©s'}

üìä Potentiel march√© : ${opFr.potentiel_marche || 'Non estim√©'}`
      } else if (opp.opportunite) {
        opportuniteText = opp.opportunite
      }

      // Construire la description enrichie avec le SaaS original et les nouvelles donn√©es
      let descriptionEnrichie = opp.description || 'Description manquante'
      if (opp.saas_original) {
        const saasOrig = opp.saas_original
        descriptionEnrichie = `üìã SAAS ORIGINAL : ${saasOrig.nom || 'Non sp√©cifi√©'}
üìÖ Date de cr√©ation : ${saasOrig.date_creation || 'Non document√©e'}
üí∞ Revenus : ${saasOrig.revenus || 'Non document√©s'}
üîó URL : ${saasOrig.url || 'Non fournie'}
‚öôÔ∏è Fonctionnalit√©s : ${saasOrig.fonctionnalites || 'Non d√©taill√©es'}
üèÜ Concurrents actuels : ${saasOrig.concurrents_actuels || 'Non list√©s'}

üá´üá∑ VERSION FRANCOPHONE PROPOS√âE :
${opp.description || 'Description de l\'adaptation francophone'}`
      }

      return {
        id: `grok-copy-${Date.now()}-${index}`,
        nom: opp.nom || 'SaaS fran√ßais √† cr√©er',
        description: descriptionEnrichie,
        probleme_resolu: opp.probleme_resolu || 'Probl√®me du march√© francophone',
        domaine: opp.domaine || 'Domaine non sp√©cifi√©',
        type_marche: opp.type_marche || 'both',
        type_produit: opp.type_produit || 'micro-saas',
        mrr_arr: opp.mrr_arr || 'Potentiel non estim√©',
        source_revenus: opp.source_revenus || 'Analyse Grok',
        stack_technique: opp.stack_technique || 'Stack non sp√©cifi√©e',
        temps_dev: opp.temps_dev || '2-4 semaines',
        complexite: opp.complexite || 'medium',
        opportunite: opportuniteText,
        potentiel: opp.potentiel || 'üî•üî•',
        lien: opp.lien_inspiration || (opp.saas_original?.url) || undefined,
        lien_product_hunt: opp.lien_product_hunt || undefined,
        lien_indie_hackers: opp.lien_indie_hackers || undefined,
        tags: Array.isArray(opp.tags) ? opp.tags : ['copie', 'adaptation'],
        date_ajout: new Date().toISOString().split('T')[0],
        validee_par: 'Grok Copy Analysis'
      }
    })
    
  } catch (error) {
    console.error('Erreur lors du parsing Grok:', error)
    console.error('Contenu re√ßu:', content)
    throw new Error(`Erreur de parsing: ${error}`)
  }
}

// Donn√©es de d√©monstration pour le fallback
const getDemoOpportunities = (): GrokOpportunity[] => {
  return [
    {
      id: `demo-${Date.now()}-1`,
      nom: "PDF Toolkit Pro",
      description: "Outil en ligne pour manipuler, compresser et convertir des PDF",
      probleme_resolu: "Les outils PDF existants sont complexes ou chers",
      domaine: "Productivit√©",
      type_marche: "b2b",
      type_produit: "micro-saas",
      mrr_arr: "2,400‚Ç¨/mois",
      source_revenus: "Indie Hackers - d√©cembre 2024",
      stack_technique: "React, Node.js, PDF-lib",
      temps_dev: "3-4 semaines",
      complexite: "medium",
      opportunite: "Version fran√ßaise avec RGPD et support fran√ßais",
      potentiel: "üî•üî•",
      tags: ["pdf", "productivit√©", "b2b"],
      date_ajout: new Date().toISOString().split('T')[0],
      validee_par: "Demo Mode"
    }
  ]
}

export async function POST(request: NextRequest) {
  try {
    const criteria: SearchCriteria = await request.json()
    
    // V√©rifier la cl√© API
    if (!GROK_API_KEY) {
      console.warn('Cl√© API Grok manquante - utilisation du mode d√©monstration')
      return NextResponse.json({
        success: true,
        data: getDemoOpportunities(),
        source: 'demo'
      })
    }

    const prompt = buildGrokPrompt(criteria)
    console.log('üîç Recherche Grok avec web search activ√©e...')

    const response = await fetch(GROK_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${GROK_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: GROK_MODEL,
        messages: [
          {
            role: 'system',
            content: 'Tu es Grok avec acc√®s √† la recherche web temps r√©el. Utilise tes capacit√©s de recherche pour trouver de vraies opportunit√©s SaaS avec des donn√©es v√©rifiables depuis Product Hunt, Indie Hackers, Reddit, etc. R√©ponds uniquement en JSON valide.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        stream: false,
        temperature: 0.3,
        max_tokens: 4000
      })
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      console.error('‚ùå Erreur API Grok:', response.status, errorData)
      
      // Fallback vers les donn√©es de d√©monstration
      return NextResponse.json({
        success: true,
        data: getDemoOpportunities(),
        source: 'demo',
        error: `API Error ${response.status}: ${errorData.error?.message || 'Unknown error'}`
      })
    }

    const data = await response.json()
    const content = data.choices[0].message.content.trim()
    
    console.log('‚úÖ R√©ponse Grok re√ßue, parsing...')
    
    try {
      const results = parseGrokResponse(content)
      console.log(`üéØ ${results.length} opportunit√©s trouv√©es via recherche web`)
      
      return NextResponse.json({
        success: true,
        data: results,
        source: 'grok-web-search'
      })
    } catch (parseError) {
      console.error('‚ùå Erreur de parsing, fallback vers demo:', parseError)
      return NextResponse.json({
        success: true,
        data: getDemoOpportunities(),
        source: 'demo',
        error: `Parse error: ${parseError}`
      })
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
    return NextResponse.json({
      success: true,
      data: getDemoOpportunities(),
      source: 'demo',
      error: `General error: ${error}`
    })
  }
}
